// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /configs)
	FindTaskConfigs(ctx echo.Context) error

	// (POST /configs)
	AddTaskConfig(ctx echo.Context) error

	// (DELETE /configs/{id})
	DeleteTaskConfig(ctx echo.Context, id int64) error

	// (GET /configs/{id})
	FindTaskConfigById(ctx echo.Context, id int64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// FindTaskConfigs converts echo context to params.
func (w *ServerInterfaceWrapper) FindTaskConfigs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindTaskConfigs(ctx)
	return err
}

// AddTaskConfig converts echo context to params.
func (w *ServerInterfaceWrapper) AddTaskConfig(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddTaskConfig(ctx)
	return err
}

// DeleteTaskConfig converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTaskConfig(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteTaskConfig(ctx, id)
	return err
}

// FindTaskConfigById converts echo context to params.
func (w *ServerInterfaceWrapper) FindTaskConfigById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindTaskConfigById(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/configs", wrapper.FindTaskConfigs)
	router.POST(baseURL+"/configs", wrapper.AddTaskConfig)
	router.DELETE(baseURL+"/configs/:id", wrapper.DeleteTaskConfig)
	router.GET(baseURL+"/configs/:id", wrapper.FindTaskConfigById)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xWTW/jNhD9K8S0RyFydxfFQqfmYwvk0l0EKXoIchiTI5uJRLLkyKlg6L8XpGzLspSk",
	"QYsihz2ZEsmZN++9GWsL0tbOGjIcoNhCkGuqMS1/o6dLa0q9ig/OW0eeNaUtiUwr69u45tYRFBDYa7OC",
	"LgNZNYHJz+9Zw6jNM7uKgpzdCNJrx9+Q17PbjOHxisrZvcZXz9zrMvD0Z6M9KSjuDgeHcMdwRxjus30s",
	"u3wgyTHPV0ceWVvzxXvrZyiziuJvaX2NDAVowx8/wCGSNkwr8jFUTSHgil6HnGIO5+dg3WJ4HFTEqvpa",
	"QnG3hR995At+yAf58532+SB8l52WodVpET9/miniBKhWM+Duu3hMm9L2/BhGyXFJNeoKCqCl9s2j3fzi",
	"yJck2VXYBm6UtmfS1pCBwToG/NKsyLTioj+9N1JUS1sDBZyLy5vfr8T5t2vBa2QhU3GNRyYRtQ4CJetN",
	"fFy24omWovFVLEpzFeP/QUtx0xhDXlzuriZHbMiHPsNPZ4uzRUxsHRl0Ggr4mF5l4JDXibm8T5vWK0qF",
	"2r1nrhUU8Ks2apArQKQwOGtCz/yHxWLPE5l0HZ2rtEwB8ocQgez7NynFVKeLL0l9ZI/uIBB6jy0kdcZE",
	"VjqwsGUibcei2GPsaS+xqfhNMF9Cd9JTM4gaQ385kkxK0HDG2ZAyn9hAKYHC0NMIP1uhkHGJIbbSWJFz",
	"dSQI9JamwBdWtf9ZjUfNNi3vdgwUlTrBOzQZ+4a6f2mZf+qUKdD37YguO3RfvtWq671REdPUJf37IPDY",
	"JU2fNI6HazWxyVW6MnKKQ481MfmQpu04hVanTRRF7fHEgQhFmhrDgNNqInV2RNjr0/h+YoxP08qPAfVo",
	"1Htq6t3MHB+9IW68eVYsPRVrPGUv2qTn2+UqieX6f1PrexunNo5fguQ3e5niv3QBa2ZX5HllJVZrG7j4",
	"vPi8iF8XfwcAAP//ZQEAhdsKAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
