// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /configs)
	FindTaskConfigs(ctx echo.Context) error

	// (POST /configs)
	AddTaskConfig(ctx echo.Context) error

	// (DELETE /configs/{id})
	DeleteTaskConfig(ctx echo.Context, id int64) error

	// (GET /configs/{id})
	FindTaskConfigById(ctx echo.Context, id int64) error

	// (PUT /configs/{id})
	UpdateTaskConfig(ctx echo.Context, id int64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// FindTaskConfigs converts echo context to params.
func (w *ServerInterfaceWrapper) FindTaskConfigs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindTaskConfigs(ctx)
	return err
}

// AddTaskConfig converts echo context to params.
func (w *ServerInterfaceWrapper) AddTaskConfig(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddTaskConfig(ctx)
	return err
}

// DeleteTaskConfig converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTaskConfig(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteTaskConfig(ctx, id)
	return err
}

// FindTaskConfigById converts echo context to params.
func (w *ServerInterfaceWrapper) FindTaskConfigById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindTaskConfigById(ctx, id)
	return err
}

// UpdateTaskConfig converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateTaskConfig(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateTaskConfig(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/configs", wrapper.FindTaskConfigs)
	router.POST(baseURL+"/configs", wrapper.AddTaskConfig)
	router.DELETE(baseURL+"/configs/:id", wrapper.DeleteTaskConfig)
	router.GET(baseURL+"/configs/:id", wrapper.FindTaskConfigById)
	router.PUT(baseURL+"/configs/:id", wrapper.UpdateTaskConfig)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xWTY/bNhD9KwTbo3btJkER6NT9SIG9NMUiQQ/BHmhyJDOWSHY43F1hof9ekLQt66Np",
	"gxatDznZEsmZN++9GeqFS9s6a8CQ5+UL93ILrUh/f4GnG2sqXccHh9YBkoa0JAVBbbGL/6lzwEvuCbWp",
	"eV9w2QRPgMtr1pDQJq8q8BK1I20NL4clZkQLzFYMpGck/I4X80Dx7GIGJ2g7Dx6wYXElx6atIIY2EDCy",
	"DJ5BhriP5RMMwYeGlrLmDfPwOQSoQ4QEYuF8rOYWKm10PjiNo45rRxIGWhapKPjzhRVOX0iroAZzAc+E",
	"4oJEnYSqLbaJ2ya0ppyk7/u+4Ai/B42gePmJH2ALvxuQ8FPVjhQ8HIHYzWeQFKt77wBFPPIO0eKCa6yC",
	"+FtZbAXxkmtDr18NJWlDUAPGUC14L2pYUHgCOcUc9i/B+iD8bjCyaJr3FS8/vfDvESpe8u9WQwes9vZf",
	"Dd7vi2kZWk2L+PHNQhEToFotgHtIEmhT2cyPISGTvaAVuonG2mgMO/v4kwOsQJJrROcpKG0vpW15waNN",
	"eMnfhRpMx67z7kODDMa6Yjf3H2/Z1a932fwyFRdQxBYQfueZkKQf4+OmY0+wYQGbWJSmJsb/DTbsPpho",
	"w5v90eSGR0CfM/xwub5cx8TWgRFO85K/Tq9ySybmVjltdiakQu3BM3eKl/xnbdQgl+eRQu+s8Zn5V+v1",
	"gScw6bhwrtEyBVh99rmlsoZJKYI2HfyS1Cf26I8CCUTR5QYZE9loT7EtI2l7FtkBY6a9EnF4fA3ML6Gb",
	"9NQComDg2YGM0weGPc76hTl1pRQTzMDTCD9ZhuCs1xRHejHR5EqdSMKzqcHTtVXdv1blSbvNC/wwhiqU",
	"miEeGo0wQP8PbfN33TKHet6u6ItjB65etOqzPxogWLqJ4nvPxKlTQk7KKrTtiQBxZNypmXFuU4iRd5xA",
	"0QIB+jSBxym1mjYWWbbHF4ckLw8X1H7oaTWTvjgh8K8n9MPMKG/mTJwCymjUOTX6fo6Ot94DBTTL4m06",
	"pudijSfvdZf0/Hq5KiC5/c/U+tbW+2EfFjzw0al4nY888Cfi561n36n/770TMp/anOfVk+GpM/8wibs8",
	"4OPBV/Ers+RbIleuVo2VotlaT+Xb9dt1/Dr+IwAA///vkirmng4AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
