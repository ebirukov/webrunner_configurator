// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /configs)
	FindTaskConfigs(ctx echo.Context) error

	// (POST /configs)
	AddTaskConfig(ctx echo.Context) error

	// (DELETE /configs/{id})
	DeleteTaskConfig(ctx echo.Context, id int64) error

	// (GET /configs/{id})
	FindTaskConfigById(ctx echo.Context, id int64) error

	// (POST /configs/{id})
	UpdateTaskConfig(ctx echo.Context, id int64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// FindTaskConfigs converts echo context to params.
func (w *ServerInterfaceWrapper) FindTaskConfigs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindTaskConfigs(ctx)
	return err
}

// AddTaskConfig converts echo context to params.
func (w *ServerInterfaceWrapper) AddTaskConfig(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddTaskConfig(ctx)
	return err
}

// DeleteTaskConfig converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTaskConfig(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteTaskConfig(ctx, id)
	return err
}

// FindTaskConfigById converts echo context to params.
func (w *ServerInterfaceWrapper) FindTaskConfigById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindTaskConfigById(ctx, id)
	return err
}

// UpdateTaskConfig converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateTaskConfig(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateTaskConfig(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/configs", wrapper.FindTaskConfigs)
	router.POST(baseURL+"/configs", wrapper.AddTaskConfig)
	router.DELETE(baseURL+"/configs/:id", wrapper.DeleteTaskConfig)
	router.GET(baseURL+"/configs/:id", wrapper.FindTaskConfigById)
	router.POST(baseURL+"/configs/:id", wrapper.UpdateTaskConfig)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xWTY/bNhD9KwTbo3btJkER6NT9SIG9NMUiQQ/BHmhyJDOWSHY43F3B0H8vSNqWLanb",
	"Llq0PuRkSyRn3rz3Zqgtl7Z11oAhz8st93INrUh/f4GnG2sqXccHh9YBkoa0JAVBbbGL/6lzwEvuCbWp",
	"eV9w2QRPgPNr1pDQJq8q8BK1I20NL4clZkQLzFYMpGck/IYX00Dx7GwGJ2g9DR6wYXElx6a1IIY2EDCy",
	"DJ5BhriP5RMMwYeG5rLmDdPwOQSofYQEYuZ8rOYWKm10PjiOow5rBxIGWmapKPjzhRVOX0iroAZzAc+E",
	"4oJEnYSqLbaJ2ya0phyl7/u+4Ai/B42gePmF72ELvxmQ8GPVDhQ8HIDY1VeQFKv76ABFPPIB0eKMa6yC",
	"+FtZbAXxkmtDb98MJWlDUAPGUC14L2qYUXgEOcUc9s/B+iT8ZjCyaJqPFS+/bPn3CBUv+XeLoQMWO/sv",
	"Bu/3xbgMrcZF/PhupogRUK1mwD0kCbSpbObHkJDJXtAK3URjrTSGjX38yQFWIMk1ovMUlLaX0ra84NEm",
	"vOQfQg2mY9d5975BBmNdsZv7z7fs6te7bH6ZigsoYgsIv/FMSNKP8XHVsSdYsYBNLEpTE+P/Bit2H0y0",
	"4c3uaHLDI6DPGX64XF4uY2LrwAinecnfple5JRNzi5w2OxNSoXbvmTvFS/6zNmqQy/NIoXfW+Mz8m+Vy",
	"zxOYdFw412iZAiy++txSWcOkFEGbDr4k9ZE9+oNAAlF0uUFOiWy0p9iWkbQdi2yPMdNeiTg8XgPzJXSj",
	"nppBFAw8O5Bx+sCwx1k/M6eulGKCGXg6wU+WITjrNcWRXow0uVJHkvBsavB0bVX3r1V51G7TAj+dQhVK",
	"TRAPjUYYoP+Htvm7bplCPW9X9MWhAxdbrfrsjwYI5m6i+N4zceyUkJOyCm17JEAcGXdqYpzbFOLEO06g",
	"aIEAfZrApym1GjcWWbbDF4ckL/cX1G7oaTWRvjgi8K8n9MPEKO+mTBwDymjUOTX6bo6ebr0HCmjmxVt1",
	"TE/FOp28113S8/VyVUBy/Z+p9a2tXxr2n52K9/mJCf5E/bz17Fv1/714QuZTm/O8ezI8deZfJnGXB3zc",
	"+yp+ZpZ8TeTKxaKxUjRr66l8v3y/jJ/HfwQAAP//iqZ36p8OAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
